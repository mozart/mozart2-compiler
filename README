Imakefile
   produces the generated Oz source files; other targets include
   `tags' and `install'.

Main.oz
   for interacting with the OPI: generate scanner/parser,
   precompile, feed, start compiler with test files.

PutEnv.oz
   auxiliary file for initializing the compiler's environment,
   for use with the tests in Main.oz.

InsertAll.oz
   system configuration file using `\insert' instead of components.

Save.oz
   saves the Oz Compiler as a component for use with the OPI.
   Defines the main read-eval-loop.

Compiler.oz
   defines the CompilerClass which invokes all compiler passes;
   inserts most of the other files.

ParseOz.oz
   this defines the interface to either the parser and scanner
   generated by Gump or the front-end internal to the emulator.
   The output consists of a tuple representation of the input
   source file as documented in Doc/TupleSyntax.

OzScanner.ozg
   Gump input file for the Oz scanner.

ozc.C
   auxiliary functions for the Gump-generated scanner for performing
   file name expansions.

OzParser.ozg
   Gump input file for the Oz parser.

TupleSyntax.oz
   auxiliary functions operating on Oz code in tuple representation
   as obtained from the parser.

CoreLanguage.oz
   defines the basic abstract syntax tree nodes as classes as
   documented in Doc/CoreLanguage.  An 'output' method is provided
   for each node as well as some basic accessor methods used by
   several of the compiler passes.  All methods needed for the
   distinct compiler passes are implemented by mixin classes.

Unnester.oz
   the Unnester class gets Oz code in tuple representation as
   input, unnests all expressions into statements, performs all
   remaining expansions and produces the core syntax graph as
   output.

UnnestFD.oz
   performs the unnesting of finite domain expressions.  This
   just transforms Oz code in tuple representation, replacing
   finite domain expressions by applications of the corresponding
   propagators.

BindingAnalysis.oz
   defines a class encapsulating the basic binding analysis
   functionality.

Annotate.oz
   mixin classes for annotating the abstract syntax tree
   nodes with the 'globalVars' and 'use' attributes.
   If the 'warnunused' switch is set, warnings are generated
   for unused and single-occurrence variables.

Builtins.oz
   provides information about those builtins deemed useful for
   static analysis and code generation.

StaticAnalysis.oz
   mixin classes implementing the static analyzer.

POTypes.oz
   defines the type hierarchy used by the static analyzer
   for type falsification.

RegSet.oz
   the module RegSet provides an abstract type for sets of
   register ids (i.e., integers) and operations on them.

CodeGen.oz
   mixin classes implementing the code generation pass.
   From the graph representation an intermediate code called
   VInstrs is generated as documented in Doc/VInstr.

CodeStore.oz
   the code store and annotation functions for the VInstrs.

CodeEmitter.oz
   register allocation and translation into real assembler code
   as documented in Doc/VInstr.

Assembler.oz
   performs peephole optimization, assembling and linking.

Opcodes.m4oz
   generates code according to the descriptions in
   Oz/include/instrDefs.m4 for calculating instruction
   sizes and writing instructions into the emulator's
   code area.

Interface.oz
   operations on interface descriptions, which make assumptions
   about the environment that have been used to optimize code
   explicit.

EmacsInterface.oz
   front-end to the CompilerClass for use within the Emacs OPI.

TkInterface.oz
   front-end to the CompilerClass for use with Tcl/Tk.  Defines
   the CompilerPanel also available from within the OPI.

QuietInterface.oz
   front-end to the CompilerClass.  This only stores the compiler's
   messages internally and provides methods for asking for the
   presence of errors and for retrieving the compiler's messages.

Reporter.oz
   the class Reporter is used for writing out error messages
   to the user.

FormatStrings.oz
   function for transforming format strings (a kind of
   virtual strings, augmented by some layout information)
   into vanilla virtual strings.

Misc.oz
   this is the place for generally useful functions to be
   used throughout the compiler.

Doc/TupleSyntax
   document defining the Oz code tuple representation.

Doc/CoreLanguage
   document defining the Oz code graph representation.

Doc/FDCompare
   document summarizing expansion of finite domain compare
   operators and the corresponding propagators.

Doc/FDCondis
   document summarizing expansion of the `condis' construct.

Doc/VInstr
   document defining the intermediate representation used
   by the code generator.

Doc/Instr
   document summarizing the machine instructions recognized
   by the Assembler.
