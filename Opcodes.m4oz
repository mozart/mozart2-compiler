dnl
dnl Authors:
dnl   Ralf Scheidhauer <scheidhr@ps.uni-sb.de>
dnl   Leif Kornstaedt <kornstae@ps.uni-sb.de>
dnl
dnl Copyright:
dnl   Ralf Scheidhauer and Leif Kornstaedt, 1997-1999
dnl
dnl Last change:
dnl   $Date$ by $Author$
dnl   $Revision$
dnl
dnl This file is part of Mozart, an implementation of Oz 3:
dnl    http://www.mozart-oz.org
dnl
dnl See the file "LICENSE" or
dnl    http://www.mozart-oz.org/LICENSE.html
dnl for information on usage and redistribution
dnl of this file, and for a DISCLAIMER OF ALL
dnl WARRANTIES.
dnl

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Opcodes maps instructions with implicit addressing modes to integers
%%


			 
define(instructionsUnneededForNewCompiler,`divert(-1)')

define(writeArg,`ifelse($1,Register,W,$1)')
define(readArg,`ifelse($1,Register,R,$1)')
define(getReg,`ifelse($1,W,W,$1,R,R,)')
define(registers,`getReg($1)`'getReg($2)`'getReg($3)')

changequote([,])
define(instruction,['$1': {GetOpcode '$1'}])
changequote(`,')

Opcodes =
opcodes(include(EMUDIR/instrDefs.m4))



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% The `StoreInstr' Procedure
%%

proc {StoreInstr Instr CodeBlock LabelDict}
   case Instr of 'skip' then
      {StoreOpcode CodeBlock Opcodes.'skip'}
   [] 'definition'(X1 X2 X3 X4 X5) then
      {StoreOpcode CodeBlock Opcodes.'definition'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreLabel CodeBlock X2 LabelDict}
      {StorePredId CodeBlock X3}
      {StoreProcedureRef CodeBlock X4}
      {StoreGRegRef CodeBlock X5}
   [] 'definitionCopy'(X1 X2 X3 X4 X5) then
      {StoreOpcode CodeBlock Opcodes.'definitionCopy'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreLabel CodeBlock X2 LabelDict}
      {StorePredId CodeBlock X3}
      {StoreProcedureRef CodeBlock X4}
      {StoreGRegRef CodeBlock X5}
   [] 'endDefinition'(X1) then
      {StoreOpcode CodeBlock Opcodes.'endDefinition'}
      {StoreLabel CodeBlock X1 LabelDict}
   [] 'move'(X1=x(_) X2=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'moveXX'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'move'(X1=x(_) X2=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'moveXY'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreYRegisterIndex CodeBlock X2}
   [] 'move'(X1=y(_) X2=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'moveYX'}
      {StoreYRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'move'(X1=y(_) X2=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'moveYY'}
      {StoreYRegisterIndex CodeBlock X1}
      {StoreYRegisterIndex CodeBlock X2}
   [] 'move'(X1=g(_) X2=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'moveGX'}
      {StoreGRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'move'(X1=g(_) X2=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'moveGY'}
      {StoreGRegisterIndex CodeBlock X1}
      {StoreYRegisterIndex CodeBlock X2}
   [] 'moveMove'(X1=x(_) X2=y(_) X3=x(_) X4=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'moveMoveXYXY'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreYRegisterIndex CodeBlock X2}
      {StoreXRegisterIndex CodeBlock X3}
      {StoreYRegisterIndex CodeBlock X4}
   [] 'moveMove'(X1=y(_) X2=x(_) X3=y(_) X4=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'moveMoveYXYX'}
      {StoreYRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
      {StoreYRegisterIndex CodeBlock X3}
      {StoreXRegisterIndex CodeBlock X4}
   [] 'moveMove'(X1=x(_) X2=y(_) X3=y(_) X4=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'moveMoveXYYX'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreYRegisterIndex CodeBlock X2}
      {StoreYRegisterIndex CodeBlock X3}
      {StoreXRegisterIndex CodeBlock X4}
   [] 'moveMove'(X1=y(_) X2=x(_) X3=x(_) X4=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'moveMoveYXXY'}
      {StoreYRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
      {StoreXRegisterIndex CodeBlock X3}
      {StoreYRegisterIndex CodeBlock X4}
   [] 'createVariable'(X1=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'createVariableX'}
      {StoreXRegisterIndex CodeBlock X1}
   [] 'createVariable'(X1=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'createVariableY'}
      {StoreYRegisterIndex CodeBlock X1}
   [] 'createVariableMove'(X1=x(_) X2) then
      {StoreOpcode CodeBlock Opcodes.'createVariableMoveX'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'createVariableMove'(X1=y(_) X2) then
      {StoreOpcode CodeBlock Opcodes.'createVariableMoveY'}
      {StoreYRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'unify'(X1 X2=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'unifyXX'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'unify'(X1 X2=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'unifyXY'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreYRegisterIndex CodeBlock X2}
   [] 'unify'(X1 X2=g(_)) then
      {StoreOpcode CodeBlock Opcodes.'unifyXG'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreGRegisterIndex CodeBlock X2}
   [] 'putRecord'(X1 X2 X3=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'putRecordX'}
      {StoreLiteral CodeBlock X1}
      {StoreRecordArity CodeBlock X2}
      {StoreXRegisterIndex CodeBlock X3}
   [] 'putRecord'(X1 X2 X3=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'putRecordY'}
      {StoreLiteral CodeBlock X1}
      {StoreRecordArity CodeBlock X2}
      {StoreYRegisterIndex CodeBlock X3}
   [] 'putList'(X1=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'putListX'}
      {StoreXRegisterIndex CodeBlock X1}
   [] 'putList'(X1=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'putListY'}
      {StoreYRegisterIndex CodeBlock X1}
   [] 'putConstant'(X1 X2=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'putConstantX'}
      {StoreConstant CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'putConstant'(X1 X2=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'putConstantY'}
      {StoreConstant CodeBlock X1}
      {StoreYRegisterIndex CodeBlock X2}
   [] 'setVariable'(X1=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'setVariableX'}
      {StoreXRegisterIndex CodeBlock X1}
   [] 'setVariable'(X1=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'setVariableY'}
      {StoreYRegisterIndex CodeBlock X1}
   [] 'setValue'(X1=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'setValueX'}
      {StoreXRegisterIndex CodeBlock X1}
   [] 'setValue'(X1=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'setValueY'}
      {StoreYRegisterIndex CodeBlock X1}
   [] 'setValue'(X1=g(_)) then
      {StoreOpcode CodeBlock Opcodes.'setValueG'}
      {StoreGRegisterIndex CodeBlock X1}
   [] 'setConstant'(X1) then
      {StoreOpcode CodeBlock Opcodes.'setConstant'}
      {StoreConstant CodeBlock X1}
   [] 'setProcedureRef'(X1) then
      {StoreOpcode CodeBlock Opcodes.'setProcedureRef'}
      {StoreProcedureRef CodeBlock X1}
   [] 'setVoid'(X1) then
      {StoreOpcode CodeBlock Opcodes.'setVoid'}
      {StoreInt CodeBlock X1}
   [] 'getRecord'(X1 X2 X3=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'getRecordX'}
      {StoreLiteral CodeBlock X1}
      {StoreRecordArity CodeBlock X2}
      {StoreXRegisterIndex CodeBlock X3}
   [] 'getRecord'(X1 X2 X3=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'getRecordY'}
      {StoreLiteral CodeBlock X1}
      {StoreRecordArity CodeBlock X2}
      {StoreYRegisterIndex CodeBlock X3}
   [] 'getRecord'(X1 X2 X3=g(_)) then
      {StoreOpcode CodeBlock Opcodes.'getRecordG'}
      {StoreLiteral CodeBlock X1}
      {StoreRecordArity CodeBlock X2}
      {StoreGRegisterIndex CodeBlock X3}
   [] 'getList'(X1=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'getListX'}
      {StoreXRegisterIndex CodeBlock X1}
   [] 'getList'(X1=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'getListY'}
      {StoreYRegisterIndex CodeBlock X1}
   [] 'getList'(X1=g(_)) then
      {StoreOpcode CodeBlock Opcodes.'getListG'}
      {StoreGRegisterIndex CodeBlock X1}
   [] 'getListValVar'(X1 X2 X3) then
      {StoreOpcode CodeBlock Opcodes.'getListValVarX'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
      {StoreXRegisterIndex CodeBlock X3}
   [] 'unifyVariable'(X1=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'unifyVariableX'}
      {StoreXRegisterIndex CodeBlock X1}
   [] 'unifyVariable'(X1=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'unifyVariableY'}
      {StoreYRegisterIndex CodeBlock X1}
   [] 'unifyValue'(X1=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'unifyValueX'}
      {StoreXRegisterIndex CodeBlock X1}
   [] 'unifyValue'(X1=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'unifyValueY'}
      {StoreYRegisterIndex CodeBlock X1}
   [] 'unifyValue'(X1=g(_)) then
      {StoreOpcode CodeBlock Opcodes.'unifyValueG'}
      {StoreGRegisterIndex CodeBlock X1}
   [] 'unifyValVar'(X1=x(_) X2=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'unifyValVarXX'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'unifyValVar'(X1=x(_) X2=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'unifyValVarXY'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreYRegisterIndex CodeBlock X2}
   [] 'unifyValVar'(X1=y(_) X2=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'unifyValVarYX'}
      {StoreYRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'unifyValVar'(X1=y(_) X2=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'unifyValVarYY'}
      {StoreYRegisterIndex CodeBlock X1}
      {StoreYRegisterIndex CodeBlock X2}
   [] 'unifyValVar'(X1=g(_) X2=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'unifyValVarGX'}
      {StoreGRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'unifyValVar'(X1=g(_) X2=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'unifyValVarGY'}
      {StoreGRegisterIndex CodeBlock X1}
      {StoreYRegisterIndex CodeBlock X2}
   [] 'unifyNumber'(X1) then
      {StoreOpcode CodeBlock Opcodes.'unifyNumber'}
      {StoreNumber CodeBlock X1}
   [] 'unifyLiteral'(X1) then
      {StoreOpcode CodeBlock Opcodes.'unifyLiteral'}
      {StoreLiteral CodeBlock X1}
   [] 'unifyVoid'(X1) then
      {StoreOpcode CodeBlock Opcodes.'unifyVoid'}
      {StoreInt CodeBlock X1}
   [] 'getLiteral'(X1 X2=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'getLiteralX'}
      {StoreLiteral CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'getLiteral'(X1 X2=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'getLiteralY'}
      {StoreLiteral CodeBlock X1}
      {StoreYRegisterIndex CodeBlock X2}
   [] 'getLiteral'(X1 X2=g(_)) then
      {StoreOpcode CodeBlock Opcodes.'getLiteralG'}
      {StoreLiteral CodeBlock X1}
      {StoreGRegisterIndex CodeBlock X2}
   [] 'getNumber'(X1 X2=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'getNumberX'}
      {StoreNumber CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'getNumber'(X1 X2=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'getNumberY'}
      {StoreNumber CodeBlock X1}
      {StoreYRegisterIndex CodeBlock X2}
   [] 'getNumber'(X1 X2=g(_)) then
      {StoreOpcode CodeBlock Opcodes.'getNumberG'}
      {StoreNumber CodeBlock X1}
      {StoreGRegisterIndex CodeBlock X2}
   [] 'allocateL'(X1) then
      {StoreOpcode CodeBlock Opcodes.'allocateL'}
      {StoreInt CodeBlock X1}
   [] 'allocateL1' then
      {StoreOpcode CodeBlock Opcodes.'allocateL1'}
   [] 'allocateL2' then
      {StoreOpcode CodeBlock Opcodes.'allocateL2'}
   [] 'allocateL3' then
      {StoreOpcode CodeBlock Opcodes.'allocateL3'}
   [] 'allocateL4' then
      {StoreOpcode CodeBlock Opcodes.'allocateL4'}
   [] 'allocateL5' then
      {StoreOpcode CodeBlock Opcodes.'allocateL5'}
   [] 'allocateL6' then
      {StoreOpcode CodeBlock Opcodes.'allocateL6'}
   [] 'allocateL7' then
      {StoreOpcode CodeBlock Opcodes.'allocateL7'}
   [] 'allocateL8' then
      {StoreOpcode CodeBlock Opcodes.'allocateL8'}
   [] 'allocateL9' then
      {StoreOpcode CodeBlock Opcodes.'allocateL9'}
   [] 'allocateL10' then
      {StoreOpcode CodeBlock Opcodes.'allocateL10'}
   [] 'deAllocateL' then
      {StoreOpcode CodeBlock Opcodes.'deAllocateL'}
   [] 'deAllocateL1' then
      {StoreOpcode CodeBlock Opcodes.'deAllocateL1'}
   [] 'deAllocateL2' then
      {StoreOpcode CodeBlock Opcodes.'deAllocateL2'}
   [] 'deAllocateL3' then
      {StoreOpcode CodeBlock Opcodes.'deAllocateL3'}
   [] 'deAllocateL4' then
      {StoreOpcode CodeBlock Opcodes.'deAllocateL4'}
   [] 'deAllocateL5' then
      {StoreOpcode CodeBlock Opcodes.'deAllocateL5'}
   [] 'deAllocateL6' then
      {StoreOpcode CodeBlock Opcodes.'deAllocateL6'}
   [] 'deAllocateL7' then
      {StoreOpcode CodeBlock Opcodes.'deAllocateL7'}
   [] 'deAllocateL8' then
      {StoreOpcode CodeBlock Opcodes.'deAllocateL8'}
   [] 'deAllocateL9' then
      {StoreOpcode CodeBlock Opcodes.'deAllocateL9'}
   [] 'deAllocateL10' then
      {StoreOpcode CodeBlock Opcodes.'deAllocateL10'}
   [] 'callMethod'(X1 X2) then
      {StoreOpcode CodeBlock Opcodes.'callMethod'}
      {StoreCallMethodInfo CodeBlock X1}
      {StoreInt CodeBlock X2}
   [] 'callGlobal'(X1 X2) then
      {StoreOpcode CodeBlock Opcodes.'callGlobal'}
      {StoreGRegisterIndex CodeBlock X1}
      {StoreInt CodeBlock X2}
   [] 'call'(X1=x(_) X2) then
      {StoreOpcode CodeBlock Opcodes.'callX'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreInt CodeBlock X2}
   [] 'call'(X1=y(_) X2) then
      {StoreOpcode CodeBlock Opcodes.'callY'}
      {StoreYRegisterIndex CodeBlock X1}
      {StoreInt CodeBlock X2}
   [] 'call'(X1=g(_) X2) then
      {StoreOpcode CodeBlock Opcodes.'callG'}
      {StoreGRegisterIndex CodeBlock X1}
      {StoreInt CodeBlock X2}
   [] 'tailCall'(X1=x(_) X2) then
      {StoreOpcode CodeBlock Opcodes.'tailCallX'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreInt CodeBlock X2}
   [] 'tailCall'(X1=g(_) X2) then
      {StoreOpcode CodeBlock Opcodes.'tailCallG'}
      {StoreGRegisterIndex CodeBlock X1}
      {StoreInt CodeBlock X2}
   [] 'callConstant'(X1 X2) then
      {StoreOpcode CodeBlock Opcodes.'callConstant'}
      {StoreConstant CodeBlock X1}
      {StoreInt CodeBlock X2}
   [] 'callProcedureRef'(X1 X2) then
      {StoreOpcode CodeBlock Opcodes.'callProcedureRef'}
      {StoreProcedureRef CodeBlock X1}
      {StoreInt CodeBlock X2}
   [] 'sendMsg'(X1 X2=x(_) X3 X4) then
      {StoreOpcode CodeBlock Opcodes.'sendMsgX'}
      {StoreLiteral CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
      {StoreRecordArity CodeBlock X3}
      {StoreCache CodeBlock X4}
   [] 'sendMsg'(X1 X2=y(_) X3 X4) then
      {StoreOpcode CodeBlock Opcodes.'sendMsgY'}
      {StoreLiteral CodeBlock X1}
      {StoreYRegisterIndex CodeBlock X2}
      {StoreRecordArity CodeBlock X3}
      {StoreCache CodeBlock X4}
   [] 'sendMsg'(X1 X2=g(_) X3 X4) then
      {StoreOpcode CodeBlock Opcodes.'sendMsgG'}
      {StoreLiteral CodeBlock X1}
      {StoreGRegisterIndex CodeBlock X2}
      {StoreRecordArity CodeBlock X3}
      {StoreCache CodeBlock X4}
   [] 'tailSendMsg'(X1 X2=x(_) X3 X4) then
      {StoreOpcode CodeBlock Opcodes.'tailSendMsgX'}
      {StoreLiteral CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
      {StoreRecordArity CodeBlock X3}
      {StoreCache CodeBlock X4}
   [] 'tailSendMsg'(X1 X2=y(_) X3 X4) then
      {StoreOpcode CodeBlock Opcodes.'tailSendMsgY'}
      {StoreLiteral CodeBlock X1}
      {StoreYRegisterIndex CodeBlock X2}
      {StoreRecordArity CodeBlock X3}
      {StoreCache CodeBlock X4}
   [] 'tailSendMsg'(X1 X2=g(_) X3 X4) then
      {StoreOpcode CodeBlock Opcodes.'tailSendMsgG'}
      {StoreLiteral CodeBlock X1}
      {StoreGRegisterIndex CodeBlock X2}
      {StoreRecordArity CodeBlock X3}
      {StoreCache CodeBlock X4}
   [] 'getSelf'(X1) then
      {StoreOpcode CodeBlock Opcodes.'getSelf'}
      {StoreXRegisterIndex CodeBlock X1}
   [] 'setSelf'(X1) then
      {StoreOpcode CodeBlock Opcodes.'setSelfG'}
      {StoreGRegisterIndex CodeBlock X1}
   [] 'lockThread'(X1 X2) then
      {StoreOpcode CodeBlock Opcodes.'lockThread'}
      {StoreLabel CodeBlock X1 LabelDict}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'inlineAt'(X1 X2 X3) then
      {StoreOpcode CodeBlock Opcodes.'inlineAt'}
      {StoreFeature CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
      {StoreCache CodeBlock X3}
   [] 'inlineAssign'(X1 X2 X3) then
      {StoreOpcode CodeBlock Opcodes.'inlineAssign'}
      {StoreFeature CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
      {StoreCache CodeBlock X3}
   [] 'branch'(X1) then
      {StoreOpcode CodeBlock Opcodes.'branch'}
      {StoreLabel CodeBlock X1 LabelDict}
   [] 'exHandler'(X1) then
      {StoreOpcode CodeBlock Opcodes.'exHandler'}
      {StoreLabel CodeBlock X1 LabelDict}
   [] 'popEx' then
      {StoreOpcode CodeBlock Opcodes.'popEx'}
   [] 'return' then
      {StoreOpcode CodeBlock Opcodes.'return'}
   [] 'getReturn'(X1=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'getReturnX'}
      {StoreXRegisterIndex CodeBlock X1}
   [] 'getReturn'(X1=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'getReturnY'}
      {StoreYRegisterIndex CodeBlock X1}
   [] 'getReturn'(X1=g(_)) then
      {StoreOpcode CodeBlock Opcodes.'getReturnG'}
      {StoreGRegisterIndex CodeBlock X1}
   [] 'funReturn'(X1=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'funReturnX'}
      {StoreXRegisterIndex CodeBlock X1}
   [] 'funReturn'(X1=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'funReturnY'}
      {StoreYRegisterIndex CodeBlock X1}
   [] 'funReturn'(X1=g(_)) then
      {StoreOpcode CodeBlock Opcodes.'funReturnG'}
      {StoreGRegisterIndex CodeBlock X1}
   [] 'testLiteral'(X1=x(_) X2 X3) then
      {StoreOpcode CodeBlock Opcodes.'testLiteralX'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreLiteral CodeBlock X2}
      {StoreLabel CodeBlock X3 LabelDict}
   [] 'testLiteral'(X1=y(_) X2 X3) then
      {StoreOpcode CodeBlock Opcodes.'testLiteralY'}
      {StoreYRegisterIndex CodeBlock X1}
      {StoreLiteral CodeBlock X2}
      {StoreLabel CodeBlock X3 LabelDict}
   [] 'testLiteral'(X1=g(_) X2 X3) then
      {StoreOpcode CodeBlock Opcodes.'testLiteralG'}
      {StoreGRegisterIndex CodeBlock X1}
      {StoreLiteral CodeBlock X2}
      {StoreLabel CodeBlock X3 LabelDict}
   [] 'testNumber'(X1=x(_) X2 X3) then
      {StoreOpcode CodeBlock Opcodes.'testNumberX'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreNumber CodeBlock X2}
      {StoreLabel CodeBlock X3 LabelDict}
   [] 'testNumber'(X1=y(_) X2 X3) then
      {StoreOpcode CodeBlock Opcodes.'testNumberY'}
      {StoreYRegisterIndex CodeBlock X1}
      {StoreNumber CodeBlock X2}
      {StoreLabel CodeBlock X3 LabelDict}
   [] 'testNumber'(X1=g(_) X2 X3) then
      {StoreOpcode CodeBlock Opcodes.'testNumberG'}
      {StoreGRegisterIndex CodeBlock X1}
      {StoreNumber CodeBlock X2}
      {StoreLabel CodeBlock X3 LabelDict}
   [] 'testRecord'(X1=x(_) X2 X3 X4) then
      {StoreOpcode CodeBlock Opcodes.'testRecordX'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreLiteral CodeBlock X2}
      {StoreRecordArity CodeBlock X3}
      {StoreLabel CodeBlock X4 LabelDict}
   [] 'testRecord'(X1=y(_) X2 X3 X4) then
      {StoreOpcode CodeBlock Opcodes.'testRecordY'}
      {StoreYRegisterIndex CodeBlock X1}
      {StoreLiteral CodeBlock X2}
      {StoreRecordArity CodeBlock X3}
      {StoreLabel CodeBlock X4 LabelDict}
   [] 'testRecord'(X1=g(_) X2 X3 X4) then
      {StoreOpcode CodeBlock Opcodes.'testRecordG'}
      {StoreGRegisterIndex CodeBlock X1}
      {StoreLiteral CodeBlock X2}
      {StoreRecordArity CodeBlock X3}
      {StoreLabel CodeBlock X4 LabelDict}
   [] 'testList'(X1=x(_) X2) then
      {StoreOpcode CodeBlock Opcodes.'testListX'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreLabel CodeBlock X2 LabelDict}
   [] 'testList'(X1=y(_) X2) then
      {StoreOpcode CodeBlock Opcodes.'testListY'}
      {StoreYRegisterIndex CodeBlock X1}
      {StoreLabel CodeBlock X2 LabelDict}
   [] 'testList'(X1=g(_) X2) then
      {StoreOpcode CodeBlock Opcodes.'testListG'}
      {StoreGRegisterIndex CodeBlock X1}
      {StoreLabel CodeBlock X2 LabelDict}
   [] 'testBool'(X1=x(_) X2 X3) then
      {StoreOpcode CodeBlock Opcodes.'testBoolX'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreLabel CodeBlock X2 LabelDict}
      {StoreLabel CodeBlock X3 LabelDict}
   [] 'testBool'(X1=y(_) X2 X3) then
      {StoreOpcode CodeBlock Opcodes.'testBoolY'}
      {StoreYRegisterIndex CodeBlock X1}
      {StoreLabel CodeBlock X2 LabelDict}
      {StoreLabel CodeBlock X3 LabelDict}
   [] 'testBool'(X1=g(_) X2 X3) then
      {StoreOpcode CodeBlock Opcodes.'testBoolG'}
      {StoreGRegisterIndex CodeBlock X1}
      {StoreLabel CodeBlock X2 LabelDict}
      {StoreLabel CodeBlock X3 LabelDict}
   [] 'match'(X1=x(_) X2) then
      {StoreOpcode CodeBlock Opcodes.'matchX'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreHashTableRef CodeBlock X2 LabelDict}
   [] 'match'(X1=y(_) X2) then
      {StoreOpcode CodeBlock Opcodes.'matchY'}
      {StoreYRegisterIndex CodeBlock X1}
      {StoreHashTableRef CodeBlock X2 LabelDict}
   [] 'match'(X1=g(_) X2) then
      {StoreOpcode CodeBlock Opcodes.'matchG'}
      {StoreGRegisterIndex CodeBlock X1}
      {StoreHashTableRef CodeBlock X2 LabelDict}
   [] 'getVariable'(X1=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'getVariableX'}
      {StoreXRegisterIndex CodeBlock X1}
   [] 'getVariable'(X1=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'getVariableY'}
      {StoreYRegisterIndex CodeBlock X1}
   [] 'getVarVar'(X1=x(_) X2=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'getVarVarXX'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'getVarVar'(X1=x(_) X2=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'getVarVarXY'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreYRegisterIndex CodeBlock X2}
   [] 'getVarVar'(X1=y(_) X2=x(_)) then
      {StoreOpcode CodeBlock Opcodes.'getVarVarYX'}
      {StoreYRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'getVarVar'(X1=y(_) X2=y(_)) then
      {StoreOpcode CodeBlock Opcodes.'getVarVarYY'}
      {StoreYRegisterIndex CodeBlock X1}
      {StoreYRegisterIndex CodeBlock X2}
   [] 'getVoid'(X1) then
      {StoreOpcode CodeBlock Opcodes.'getVoid'}
      {StoreInt CodeBlock X1}
   [] debugEntry(X1 X2 X3 X4) then
      {AddDebugInfo CodeBlock X1 X2}
      {StoreOpcode CodeBlock Opcodes.'debugEntry'}
      {StoreLiteral CodeBlock X1}
      {StoreNumber CodeBlock X2}
      {StoreNumber CodeBlock X3}
      {StoreLiteral CodeBlock X4}
   [] 'debugExit'(X1 X2 X3 X4) then
      {StoreOpcode CodeBlock Opcodes.'debugExit'}
      {StoreLiteral CodeBlock X1}
      {StoreNumber CodeBlock X2}
      {StoreNumber CodeBlock X3}
      {StoreLiteral CodeBlock X4}
   [] 'globalVarname'(X1) then
      {StoreOpcode CodeBlock Opcodes.'globalVarname'}
      {StoreConstant CodeBlock X1}
   [] 'localVarname'(X1) then
      {StoreOpcode CodeBlock Opcodes.'localVarname'}
      {StoreConstant CodeBlock X1}
   [] 'clear'(X1) then
      {StoreOpcode CodeBlock Opcodes.'clearY'}
      {StoreYRegisterIndex CodeBlock X1}
   [] 'profileProc' then
      {StoreOpcode CodeBlock Opcodes.'profileProc'}
   [] 'callBI'(X1 X2) then
      {StoreOpcode CodeBlock Opcodes.'callBI'}
      {StoreBuiltinname CodeBlock X1}
      {StoreLocation CodeBlock X2}
   [] 'inlinePlus1'(X1 X2) then
      {StoreOpcode CodeBlock Opcodes.'inlinePlus1'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'inlineMinus1'(X1 X2) then
      {StoreOpcode CodeBlock Opcodes.'inlineMinus1'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
   [] 'inlinePlus'(X1 X2 X3) then
      {StoreOpcode CodeBlock Opcodes.'inlinePlus'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
      {StoreXRegisterIndex CodeBlock X3}
   [] 'inlineMinus'(X1 X2 X3) then
      {StoreOpcode CodeBlock Opcodes.'inlineMinus'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
      {StoreXRegisterIndex CodeBlock X3}
   [] 'inlineDot'(X1 X2 X3 X4) then
      {StoreOpcode CodeBlock Opcodes.'inlineDot'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreFeature CodeBlock X2}
      {StoreXRegisterIndex CodeBlock X3}
      {StoreCache CodeBlock X4}
   [] 'testBI'(X1 X2 X3) then
      {StoreOpcode CodeBlock Opcodes.'testBI'}
      {StoreBuiltinname CodeBlock X1}
      {StoreLocation CodeBlock X2}
      {StoreLabel CodeBlock X3 LabelDict}
   [] 'testLT'(X1 X2 X3 X4) then
      {StoreOpcode CodeBlock Opcodes.'testLT'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
      {StoreXRegisterIndex CodeBlock X3}
      {StoreLabel CodeBlock X4 LabelDict}
   [] 'testLE'(X1 X2 X3 X4) then
      {StoreOpcode CodeBlock Opcodes.'testLE'}
      {StoreXRegisterIndex CodeBlock X1}
      {StoreXRegisterIndex CodeBlock X2}
      {StoreXRegisterIndex CodeBlock X3}
      {StoreLabel CodeBlock X4 LabelDict}
   end
end

